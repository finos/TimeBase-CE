// =============================================================================
// Copyright 2023 EPAM Systems, Inc
//
// See the NOTICE file distributed with this work for additional information
// regarding copyright ownership. Licensed under the Apache License,
// Version 2.0 (the "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
// License for the specific language governing permissions and limitations under
// =============================================================================
using System;
using System.IO;

using EPAM.Deltix.Timebase.Api;
using EPAM.Deltix.Timebase.Api.Communication;
using EPAM.Deltix.Timebase.Client;

namespace TimebaseSample
{
    /// <summary>
    /// In order for this sample to produce something meaningful, the
    /// TimeBase instance should not be empty.
    /// </summary>
    public class ListStreams
    {
        public static void Run()
        {
            using (ITickDb db = TickDbFactory.CreateFromUrl("${timebase.url}"))
            {
                db.Open(true);
                //
                //  Iterate over all streams
                //
                foreach (ITickStream stream in db.ListStreams())
                {
                    Console.WriteLine(
                        "STREAM  key: " + stream.Key +
                        "; name: " + stream.Name +
                        "; description: " +
                        stream.Description
                    );

                    Interval periodicity = stream.GetPeriodicity().GetInterval();

                    Console.Write("    Periodicity: ");

                    if (periodicity == null)
                        Console.WriteLine("Irregular");
                    else
                        Console.WriteLine(periodicity.GetNumUnits() + " " + periodicity.GetUnit());

                    DateTime[] tr = stream.GetTimeRange();

                    if (tr != null)
                        Console.WriteLine(
                            "    TIME RANGE: " +
                            (tr[0]) + " .. " +
                            (tr[1])
                        );

                    foreach (IInstrumentIdentity id in stream.ListEntities())
                    {
                        Console.WriteLine(
                            "symbol: " + id.Symbol.ToString()
                        );
                    }
                }

            }
        }
    }
}
