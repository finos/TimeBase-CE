evaluationDependsOn(':java')

description = "Timebase Server"

ext {
    dockerImageName = 'timebase-ce-server'
}

shadowJar {
    zip64 = true
    mergeServiceFiles('META-INF/spring.*')
    mergeServiceFiles('META-INF/services/javax.servlet.ServletContainerInitializer') // for tomcat
}

dependencies {

    api project(':java:timebase:commons')
    api project(':java:timebase:api')
    api project(':java:timebase:aerondirect')

    implementation project(':java:timebase:snmpagent')

    implementation ('com.epam.deltix:timebase-lang')
    implementation ('com.epam.deltix:timebase-util')
    implementation ('com.epam.deltix:timebase-messages')
    implementation ('com.epam.deltix:timebase-collections')
    implementation ('com.epam.deltix:dfp')
    implementation('com.epam.deltix:containers')
    implementation ('com.epam.deltix:thread-affinity')

    implementation ('org.apache.commons:commons-lang3')

    implementation 'com.epam.deltix:gflog-api', 'com.epam.deltix:gflog-core',
            'com.epam.deltix:gflog-jul'

    // web application

    implementation 'org.springframework:spring-webmvc'
    implementation 'org.springframework:spring-web'

    implementation 'org.apache.taglibs:taglibs-standard-impl' // JSTL Support
    implementation 'javax.servlet.jsp.jstl:jstl-api'; // JSTL Support

    implementation 'javax.xml.bind:jaxb-api'
    implementation 'com.sun.xml.bind:jaxb-impl'
    implementation 'com.sun.xml.bind:jaxb-core'

    implementation 'org.lz4:lz4-java:1.8.0' // LZH codec
    implementation 'org.xerial.snappy:snappy-java'

    implementation 'com.google.guava:guava'

    implementation group: 'com.microsoft.azure', name: 'azure-data-lake-store-sdk', version: '2.3.9'

    implementation 'com.github.ben-manes.caffeine:caffeine:2.5.6' // Cache implementation
    implementation 'com.lmax:disruptor'
    implementation 'commons-io:commons-io'

    // TODO: Replace by JSR305
    compileOnly 'com.intellij:annotations'

    // For JMH-based tests
    testImplementation 'org.openjdk.jmh:jmh-core'
    testImplementation 'org.openjdk.jmh:jmh-generator-annprocess'

    implementation 'org.owasp.encoder:encoder'
}

// Docker

// Use :java:timebase:server:dockerPublishImage to publish the image
task copyTimebaseServerContainerDependensies(type: Copy) {
    group 'docker'
    description 'Copy all timebase server dependencies'
    //dependsOn ':java:cleanSubprojects' // This is necessary to force clean build.
    dependsOn 'build'
    dependsOn ':java:timebase:server:copyWebapp'
    dependsOn ':java:timebase:commons:copyWebapp'
    dependsOn ':java:timebase:s3:build'
    dependsOn ':distribution:build'
    dependsOn ':generateSetQsVersionScript'
    //dependsOn ':java:timebase:client:jar'

    into project.file("$buildDir/docker/timebase")

    //from "$rootDir/inst.properties"
    into ("web") {
        from "$rootDir/web" // TODO: Avoid sharing resources thought global folder. Use explicit task outputs instead.
        include 'tb/**'
        include 'default/**'
    }
    into ("bin") {
        from "$rootDir/bin" // TODO: Avoid sharing resources thought global folder. Use explicit task outputs instead.
    }
    into ("lib") {
        // Runtime dependencies
        from configurations.runtimeClasspath
        // Main TimeBase server jar
        from jar

        from project(':java:timebase:client').configurations.runtimeClasspath
        from project(':java:timebase:client').tasks.findByName('jar')

        from project(':java:timebase:s3').configurations.runtimeClasspath
        from project(':java:timebase:s3').tasks.findByName('jar')
    }
}

// New docker task
// Right now this task re-uses old task later the content of copyTimebaseServerContainerDependensies whold be moved to prepareFilesForDocker
task prepareFilesForDocker {
    dependsOn copyTimebaseServerContainerDependensies
}

task copyWebapp(type: Copy) {
    description 'Copy timebase webapp war file into timebase server resources'
    dependsOn ':java:timebase:web:war'
    mustRunAfter processResources
    mustRunAfter clean

    from (project(':java:timebase:web').file('build/libs')) {
        include '*.war'
        rename 'timebase-web(.*).war', 'timebase-web.war'
    }
    into sourceSets.main.output.resourcesDir.absolutePath + '/webapp'
}

shadowJar.dependsOn copyWebapp
